// Run `npx prisma generate` to update this file

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Lemon Squeezy Models

model Subscription {
  id                 Int       @id @default(autoincrement())
  lemonSqueezyId     Int       @unique
  orderId            Int       @unique
  name               String
  email              String
  status             String
  renewsAt           DateTime?
  endsAt             DateTime?
  trialEndsAt        DateTime?
  resumesAt          DateTime?
  userId             String    @unique
  isUsageBased       Boolean   @default(false)
  subscriptionItemId Int?      @unique
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  customerId         Int?

  @@index([lemonSqueezyId])
}

model WebhookEvent {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  eventName       String
  processed       Boolean  @default(false)
  body            Json
  processingError String?
}

// NextAuth.js Models

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String         @id @default(uuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  imageUrl      String?
  jobTitle      String?
  token         String?
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
}
